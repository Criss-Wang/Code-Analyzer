1 - Valid if pattern
if ifs;
Select ifs pattern ifs ( _ , _ , _ )
2, 9, 17
5000
2 - Valid if pattern with variable 
if ifs; variable v;
Select ifs pattern ifs ( v, _ , _ )
2, 9, 17
5000
3 - Valid while pattern
while w; 
Select w pattern w ( " while ", _)
6
5000
4 - Valid if and while pattern clauses 
if ifs; while w; variable v;
Select <ifs, w> pattern ifs (v, _, _ ) pattern w (v, _)
9 6
5000
5 - Multiple pattern with explicit and
if ifs; while w; assign a;
Select a such that Parent(ifs, a) pattern ifs ("print",  _  , _  ) and a ("x", _)
3
5000
6 - Multiple pattern with explicit and
if ifs; while w;
Select BOOLEAN pattern w ("while", _) and ifs ("while", _, _) such that Parent(w, ifs) 
TRUE
5000
7 - Syntactically invalid number of arguments for if pattern
if ifs;
Select BOOLEAN pattern ifs ("read", _)

5000
8 - Syntactically invalid number of arguments for while pattern
while w;
Select BOOLEAN pattern w ("while", _, _)

5000
9 - Semantically invalid undeclared variable v
if ifs;
Select BOOLEAN pattern ifs ( v , _ , _ )
FALSE
5000
10 - Semantically invalid undeclared while stmt
while w;
Select BOOLEAN pattern w1 ( "we" , _ )
FALSE
5000
11 - Multiple pattern clauses 
if ifs; assign a; while w; variable v;
Select <ifs, a> such that Parent(ifs, a) pattern ifs(_ , _ , _) and w ( v, _) and a (_ , _ )
2 3, 2 4, 2 14, 9 11, 17 18
5000
12 - Multiple pattern clauses with fixed variables
if ifs1, ifs2; assign a; while w; variable v;
Select <ifs1, w, a, v, ifs2> such that Parent(ifs1, w) pattern ifs1( "read" , _ , _) pattern w ( v, _) and a ( "while" , _ ) such that Parent (w, ifs2) 
2 6 8 while 9
5000
13 - Select control variables of ifs
if ifs; variable v;
Select <ifs.stmt#, v.varName> pattern ifs(v, _, _)
2 read, 2 print, 9 while, 9 z, 17 telephone, 17 bye
5000
14 - Select control variables of ifs
if ifs; variable v; constant c;
Select <ifs.stmt#, v.varName> pattern ifs(v, _, _) with ifs.stmt# = c.value
2 read, 2 print, 9 while, 9 z
5000
15 - Multiple pattern clauses across different procedures
if ifs; while w; variable v;
Select <ifs.stmt#, w.stmt#, v.varName> such that Parent*(ifs, w) pattern ifs(v, _, _)
2 6 read, 2 6 print, 17 19 telephone, 17 19 bye, 17 21 telephone, 17 21 bye
5000
16 - Multiple pattern clauses 
while w1, w2; assign a;
Select <w1, w2>  pattern w1 ("we", _) pattern w2 (_, _) such that Parent*(w1, w2) and Parent(w1, a) pattern a("print", _"8 * d"_ ) and a (_, _"w % 3"_) 
19 21
5000
17 - Valid boolean return

Select BOOLEAN such that Next(2, 6) 
TRUE
5000
18 - Valid synonym return
stmt s;
Select s such that Next(12, 6) and Uses(s, "print")
2, 6, 7, 9, 12, 15, 17, 19, 20, 21, 22
5000
19 - Valid tuple return 
assign a; while w;
Select <a, w> such that Next(a, w)
20 21, 22 21
5000
20 - Valid Next with synonym and given variable
stmt s;
Select s such that Next(9, s)
10, 13
5000
21 - Arguments of Next are both underscores

Select BOOLEAN such that Next(_, _)
TRUE
5000
22 - Syntactically invalid arguments in Next

Select BOOLEAN such that Next( _)

5000
23 - Semantically invalid use of Next
stmt s;
Select BOOLEAN such that Next(s, s)
FALSE
5000
24 - Valid NextT
stmt s;
Select BOOLEAN such that Next*(s, s)
TRUE
5000
25 - Valid NextT and Next
stmt s; call cl;
Select BOOLEAN such that Next*(cl, 14) such that Next(cl, 6)
TRUE
5000
26 - Valid NextT and Next with explicit and
stmt s; read r;
Select BOOLEAN such that Next*(9, r) and Next(r, 6)
TRUE
5000
27 - Valid Next with explicit and
stmt s;
Select s such that Next(s, 19) and Next(s, 22) and Next*(s, s)
21
5000
28 - Valid Next with with clause
assign a; while w; constant c;
Select <a, w> such that Next(a, w) with a.stmt# = 20
20 21
5000
29 - Line 12 executes after stmt in ifs
stmt s; if ifs; variable v;
Select s.stmt# such that Next*(s, 12) such that Modifies(2, "x") such that Parent(ifs, s)
10, 11, 6, 12, 13
5000